/* -*- C++ -*- */
/* Generated by /home/quynhpp/Workspace/OpenDDS/OpenDDS/bin/opendds_idl version 3.15 (ACE version 6.2a_p18) running on input file MyMessenger.idl */
#ifndef OPENDDS_IDL_GENERATED_MYMESSENGERTYPESUPPORTIMPL_H_UENIAV
#define OPENDDS_IDL_GENERATED_MYMESSENGERTYPESUPPORTIMPL_H_UENIAV
#include "MyMessengerC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "MyMessengerTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: MyMessenger */



/* Begin STRUCT: MyMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const MyMessenger::MyMessage& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const MyMessenger::MyMessage& stru);

bool operator>>(Serializer& strm, MyMessenger::MyMessage& stru);

size_t gen_max_marshaled_size(const MyMessenger::MyMessage& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const MyMessenger::MyMessage> stru, bool align);

void gen_find_size(KeyOnly<const MyMessenger::MyMessage> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const MyMessenger::MyMessage> stru);

bool operator>>(Serializer& strm, KeyOnly<MyMessenger::MyMessage> stru);

template <>
struct MarshalTraits<MyMessenger::MyMessage> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace MyMessenger {
/// This structure supports use of std::map with one or more keys.
struct  MyMessage_OpenDDS_KeyLessThan {
  bool operator()(const MyMessenger::MyMessage& v1, const MyMessenger::MyMessage& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.subject_id < v2.subject_id) return true;
    if (v2.subject_id < v1.subject_id) return false;
    return false;
  }
};
}


namespace MyMessenger {
class MyMessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<MyMessenger::MyMessage> {
  typedef MyMessenger::MyMessage MessageType;
  typedef MyMessenger::MyMessageSeq MessageSequenceType;
  typedef MyMessenger::MyMessageTypeSupport TypeSupportType;
  typedef MyMessenger::MyMessageTypeSupportImpl TypeSupportTypeImpl;
  typedef MyMessenger::MyMessageDataWriter DataWriterType;
  typedef MyMessenger::MyMessageDataReader DataReaderType;
  typedef MyMessenger::MyMessage_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "MyMessenger::MyMessage"; }
  static bool gen_has_key () { return true; }
  static size_t key_count () { return 1; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace MyMessenger {
class  MyMessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MyMessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<MyMessage> TraitsType;
  typedef MyMessageTypeSupport TypeSupportType;
  typedef MyMessageTypeSupport::_var_type _var_type;
  typedef MyMessageTypeSupport::_ptr_type _ptr_type;

  MyMessageTypeSupportImpl() {}
  virtual ~MyMessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MyMessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<MyMessenger::MyMessage>();
bool gen_skip_over(Serializer& ser, MyMessenger::MyMessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: MyMessage */

/* End MODULE: MyMessenger */
#endif /* OPENDDS_IDL_GENERATED_MYMESSENGERTYPESUPPORTIMPL_H_UENIAV */
